/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface IAppCreditManagerInterface extends ethers.utils.Interface {
  functions: {
    "addCollateral(address,address,uint256)": FunctionFragment;
    "calcRepayAmount(address,bool)": FunctionFragment;
    "closeCreditAccount(address,tuple[])": FunctionFragment;
    "defaultSwapContract()": FunctionFragment;
    "getCreditAccountOrRevert(address)": FunctionFragment;
    "hasOpenedCreditAccount(address)": FunctionFragment;
    "increaseBorrowedAmount(uint256)": FunctionFragment;
    "openCreditAccount(uint256,address,uint256,uint256)": FunctionFragment;
    "repayCreditAccount(address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "addCollateral",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "calcRepayAmount",
    values: [string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "closeCreditAccount",
    values: [string, { path: string[]; amountOutMin: BigNumberish }[]]
  ): string;
  encodeFunctionData(
    functionFragment: "defaultSwapContract",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getCreditAccountOrRevert",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "hasOpenedCreditAccount",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "increaseBorrowedAmount",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "openCreditAccount",
    values: [BigNumberish, string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "repayCreditAccount",
    values: [string]
  ): string;

  decodeFunctionResult(
    functionFragment: "addCollateral",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calcRepayAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "closeCreditAccount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "defaultSwapContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCreditAccountOrRevert",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "hasOpenedCreditAccount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "increaseBorrowedAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "openCreditAccount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "repayCreditAccount",
    data: BytesLike
  ): Result;

  events: {};
}

export class IAppCreditManager extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: IAppCreditManagerInterface;

  functions: {
    addCollateral(
      onBehalfOf: string,
      token: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    calcRepayAmount(
      borrower: string,
      isLiquidated: boolean,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    closeCreditAccount(
      to: string,
      paths: { path: string[]; amountOutMin: BigNumberish }[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    defaultSwapContract(overrides?: CallOverrides): Promise<[string]>;

    getCreditAccountOrRevert(
      borrower: string,
      overrides?: CallOverrides
    ): Promise<[string]>;

    hasOpenedCreditAccount(
      borrower: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    increaseBorrowedAmount(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    openCreditAccount(
      amount: BigNumberish,
      onBehalfOf: string,
      leverageFactor: BigNumberish,
      referralCode: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    repayCreditAccount(
      to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  addCollateral(
    onBehalfOf: string,
    token: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  calcRepayAmount(
    borrower: string,
    isLiquidated: boolean,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  closeCreditAccount(
    to: string,
    paths: { path: string[]; amountOutMin: BigNumberish }[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  defaultSwapContract(overrides?: CallOverrides): Promise<string>;

  getCreditAccountOrRevert(
    borrower: string,
    overrides?: CallOverrides
  ): Promise<string>;

  hasOpenedCreditAccount(
    borrower: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  increaseBorrowedAmount(
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  openCreditAccount(
    amount: BigNumberish,
    onBehalfOf: string,
    leverageFactor: BigNumberish,
    referralCode: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  repayCreditAccount(
    to: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    addCollateral(
      onBehalfOf: string,
      token: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    calcRepayAmount(
      borrower: string,
      isLiquidated: boolean,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    closeCreditAccount(
      to: string,
      paths: { path: string[]; amountOutMin: BigNumberish }[],
      overrides?: CallOverrides
    ): Promise<void>;

    defaultSwapContract(overrides?: CallOverrides): Promise<string>;

    getCreditAccountOrRevert(
      borrower: string,
      overrides?: CallOverrides
    ): Promise<string>;

    hasOpenedCreditAccount(
      borrower: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    increaseBorrowedAmount(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    openCreditAccount(
      amount: BigNumberish,
      onBehalfOf: string,
      leverageFactor: BigNumberish,
      referralCode: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    repayCreditAccount(to: string, overrides?: CallOverrides): Promise<void>;
  };

  filters: {};

  estimateGas: {
    addCollateral(
      onBehalfOf: string,
      token: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    calcRepayAmount(
      borrower: string,
      isLiquidated: boolean,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    closeCreditAccount(
      to: string,
      paths: { path: string[]; amountOutMin: BigNumberish }[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    defaultSwapContract(overrides?: CallOverrides): Promise<BigNumber>;

    getCreditAccountOrRevert(
      borrower: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    hasOpenedCreditAccount(
      borrower: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    increaseBorrowedAmount(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    openCreditAccount(
      amount: BigNumberish,
      onBehalfOf: string,
      leverageFactor: BigNumberish,
      referralCode: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    repayCreditAccount(
      to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addCollateral(
      onBehalfOf: string,
      token: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    calcRepayAmount(
      borrower: string,
      isLiquidated: boolean,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    closeCreditAccount(
      to: string,
      paths: { path: string[]; amountOutMin: BigNumberish }[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    defaultSwapContract(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getCreditAccountOrRevert(
      borrower: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    hasOpenedCreditAccount(
      borrower: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    increaseBorrowedAmount(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    openCreditAccount(
      amount: BigNumberish,
      onBehalfOf: string,
      leverageFactor: BigNumberish,
      referralCode: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    repayCreditAccount(
      to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
